<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="<%= asset_path 'application.tailwind.css' %>" rel="stylesheet">
  <title>Enter / Edit Spends - MoneyMap</title>

<style>
    body {
      background-color: #f3f4f6;
      min-height: 100vh;
    }

    .sidebar {
      background-color: white;
      box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
      padding: 20px;
      position: fixed;
      top: 70px;
      left: 0;
      height: calc(100vh - 70px);
      display: flex;
      flex-direction: column;
      width: 260px;
    }
    .sidebar a {
      display: block;
      padding: 15px;
      margin-bottom: 10px;
      font-size: 1rem;
      color: #374151;
      text-decoration: none;
      border-radius: 5px;
    }

    .sidebar a.active, .sidebar a:hover {
      background-color: rgb(126, 220, 151);
      color: white;
    }

    .content {
      margin-left: 270px;
      padding: inherit;
      padding-top: 4rem;
      width: calc(100% - 20px);
      margin-top: 60px;
    }
    
    header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background-color: white;
      box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
      padding: 1rem 2rem;
      width: 100%;
      position: fixed;
      top: 0;
      left: 0;
      z-index: 50;
    }
    
    .logo-container img {
      height: 3rem;
    }
    .logo-container {
      display: flex;
      align-items: center;
    }
  
    .profile-container {
      display: flex;
      align-items: center;
    }
    
    .profile-icon {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: #ccc;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 10px;
      cursor: pointer;
    }
    
    .logout {
      font-size: 1rem;
      color:rgb(255, 73, 73);
      text-decoration: none;
      font-weight: bold;
      cursor: pointer;
    }
    .logout:hover {
      text-decoration: none;
      cursor: pointer;
    }
    
    .logout {
      font-size: 1rem;
      color: #EF4444;
      text-decoration: none;
      font-weight: 600;
      padding: 0.5rem 1rem;
      border-radius: 0.375rem;
      transition: all 0.3s ease;
    }
    
    .logout:hover {
      color: white;
      background-color: #EF4444;
    }

  

    .form-container {
      background-color: white;
      padding: 1rem;
      border-radius: 1rem;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .back-button {
      display: inline-flex;
      align-items: center;
      padding: 0.5rem 1rem;
      background-color: #E5E7EB;
      color: #374151;
      border-radius: 0.5rem;
      transition: all 0.3s ease;
          margin: 1rem;
    }

    .back-button:hover {
      background-color: #D1D5DB;
    }

    .expense-entry {
      display: flex;
      gap: 0.5rem;
      margin-bottom: 0.5rem;
    }

    .add-expense-btn {
      background-color: #3B82F6;
      color: white;
      padding: 0.4rem 1rem;
      border-radius: 0.5rem;
      transition: all 0.3s ease;
    }

    .add-expense-btn:hover {
      background-color: #2563EB;
    }

    .save-btn {
      background-color: #10B981;
      color: white;
      padding: 0.4rem 1rem;
      border-radius: 0.5rem;
      transition: all 0.3s ease;
    }

    .save-btn:hover {
      background-color: #059669;
    }

    .remove-expense {
      background-color: #ff6363;
    color: white;
    width: 2rem;
    height: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: all 0.3s ease;
    }

    .remove-expense:hover {
      background-color: #DC2626;
    }

    .imput {
      background-color:rgb(240, 240, 240);
      padding: 0.5rem 1rem;
    }

        .toast {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      padding: 10px 20px;
      border-radius: 5px;
      z-index: 100; /* Ensure it's on top */
      opacity: 0; /* Initially hidden */
      transition: opacity 0.5s ease, transform 0.3s ease; /* Smooth transitions */
    }

    .toast.success {
      background-color: #4CAF50; /* Green */
      color: white;
    }

    .toast.error {
      background-color: #F44336; /* Red */
      color: white;
    }

    .toast.show {
      opacity: 1;
      transform: translateX(-50%) translateY(20px); /* Move down slightly when shown */
    }

    #loader {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 1000;
    background: rgba(255, 255, 255, 0.9);
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }

    .loader {
    border: 4px solid #f3f3f3;
    border-radius: 50%;
    border-top: 4px solid #3498db;
    width: 30px;
    height: 30px;
    animation: spin 1s linear infinite;
    display: none;
    }

    #loading-overlay { 
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 1000;
    background: rgba(255, 255, 255, 0.9);
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .amount.positive { color: #10B981; }
    .amount.zero { color: #6B7280; }
    .amount.negative { color: #DC2626; display: none; } /* Hide negative values */

    @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
    }

</style>

</head>

<body class="bg-gray-100 flex min-h-screen">
  <header>
    <div class="logo-container">
      <%= image_tag "money_map.png", alt: "MoneyMap Logo" %>
    </div>
    <div class="profile-container">
     <button class="profile-container">
      <%= link_to "üë§", profile_path, method: :delete, class: "profile-icon" %>
     </button>
      <nav>
        <button><%= link_to "Log Out", signin_path, method: :delete, class: "logout" %></button>
      </nav>
    </div>
  </header>
  
    <!-- Sidebar -->
  <aside class="sidebar">
    <%= link_to "Dashboard", 
        dashboard_path, 
        class: "#{current_page?(dashboard_path) ? 'active' : ''}", 
        onclick: "setTimeout(function() { window.location.reload(); }, 100)" %>

    <%= link_to "Enter / Edit Spends", 
        expenses_path, 
        class: "#{current_page?(expenses_path) ? 'active' : ''}", 
        onclick: "setTimeout(function() { window.location.reload(); }, 100)" %>

    <a href="#" onclick="setTimeout(function() { window.location.reload(); }, 100)">Saving Goals</a>
    <a href="#" onclick="setTimeout(function() { window.location.reload(); }, 100)">Dynamic Budget Allocator</a>
  </aside>
  <!-- Main Content -->

  <main class="content">
      <%= csrf_meta_tags %>
    <% if notice || alert %>
      <div class="toast <%= notice ? 'success' : 'error' %> show">
        <%= notice || alert %>
      </div>
    <% end %>

    <div class="p-6 max-w-4xl mx-auto bg-white rounded-2xl shadow-lg">
      <button onclick="window.location.href='<%= dashboard_path %>'" class="back-button">
        ‚Üê Back to Dashboard
      </button>

      <div class="form-container relative">
        <h2 class="text-2xl font-semibold mb-4">Enter / Edit Spends</h2>
        <div class="form-container relative">
        <div id="loading-overlay" style="display: none;">  <div class="loader"></div>
        <span>Loading...</span>
    
      </div>

 <%= form_with(url: expenses_path, method: :post, local: true, id: "expense-form") do |f| %>
  <!-- Year Selection -->
  <div class="mb-4">
    <label>Year: </label>
    <%= select_tag :year, 
        options_for_select((2025..2030).to_a, selected: params[:year]),
        class: "imput rounded-lg",
        onchange: "updateMonth()" %>
  </div>

  <!-- Month Selection -->
  <div class="mb-4">
  <label>Month: </label>
<%= select_tag :month, 
    options_for_select(Date::MONTHNAMES.compact, selected: params[:month]),
    class: "imput rounded-lg",
    onchange: "loadExistingData()" %>
    </div>
  <!-- Income Field -->
  <div class="mb-4">
    <label>Income: </label>
    <%= number_field_tag :income, @income_value,
        class: "imput rounded-lg",
        
        step: 0.01 %>
  </div>

  <!-- Expenses Container -->
  <div id="expenses-container">
    <div class="expense-entry">
      <%= select_tag "expense[category][]", 
          options_for_select(["Rent", "Food", "Entertainment", "Utilities", "Other"]), 
          class: "w-1/2 p-2 imput rounded-lg",
          required: true %>
      <%= number_field_tag "expense[amount][]", 
            nil, 
          placeholder: "Amount Spent", 
          class: "w-1/2 p-2 imput rounded-lg", 
          required: true,
          step: 0.01 %>
      <button type="button" class="remove-expense">X</button>
    </div>
  </div>

  <button type="button" id="add-expense" class="add-expense-btn">Add More</button>
  <div class="loader" id="loader"></div>
  <button type="submit" class="save-btn">Save</button>
<% end %>
      </div>
    </div>
  </main>

<script>
document.addEventListener("DOMContentLoaded", function() {
  // Initialize form
    loadExistingData();
  
  // Event listeners
  document.getElementById("add-expense").addEventListener("click", addNewExpenseRow);
  document.getElementById("expense-form").addEventListener("submit", handleFormSubmit);
  document.querySelectorAll('select[name="year"], select[name="month"]').forEach(el => {
    el.addEventListener('change', loadExistingData);
  });

  // Input validation
  document.getElementById("expenses-container").addEventListener("input", validateExpenses);
  document.querySelector('input[name="income"]').addEventListener("input", validateExpenses);
});

// Enhanced loadExistingData with loading state
async function loadExistingData() {
    showLoader();
    const year = document.querySelector("select[name='year']").value;
    const month = document.querySelector("select[name='month']").value;

    if (!year || !month) {
        hideLoader();
        return;
    }

    try {
        // Fetch income data
        const incomeResponse = await fetch(`/expenditures/show?year=${year}&month=${month}`);
        if (!incomeResponse.ok) throw new Error("Failed to fetch income data");
        const incomeData = await incomeResponse.json();

        // Fetch expense data
        const expenseResponse = await fetch(`/expenses/show?year=${year}&month=${month}`);
        if (!expenseResponse.ok) throw new Error("Failed to fetch expense data");
        const expenseData = await expenseResponse.json();

        // Populate income field
        document.querySelector("input[name='income']").value = incomeData.income || '';

        // Clear existing expense rows
        const container = document.getElementById("expenses-container");
        container.innerHTML = '';

        // Populate expense rows
        if (expenseData.expenses && expenseData.expenses.length > 0) {
            expenseData.expenses.forEach(expense => {
                addNewExpenseRow(expense);
            });
        } else {
            addNewExpenseRow(); // Add at least one default row which is not deletable
        }
    } catch (error) {
        console.error("Error loading data:", error);
        showToast("No Previous Data Found", "error");
    } finally {
        hideLoader();
    }
}


function addNewExpenseRow(expenseData = {}) {  
    const container = document.getElementById("expenses-container");
    const newRow = document.createElement("div");
    newRow.classList.add("expense-entry");
    newRow.innerHTML = `
        <select name="expense[category][]" class="w-1/2 p-2 imput rounded-lg" required>
            ${['Rent', 'Food', 'Entertainment', 'Utilities', 'Other'].map(opt => 
                `<option value="${opt}" ${expenseData.category === opt ? 'selected' : ''}>${opt}</option>`
            ).join('')}
        </select>
        <input type="number" name="expense[amount][]" 
               class="w-1/2 p-2 imput rounded-lg" 
               value="${expenseData.amount_spent || ''}"  placeholder="Amount"
               required 
               step="0.01">
        <button type="button" class="remove-expense">X</button>
    `;

    newRow.querySelector('.remove-expense').addEventListener('click', () => {
        if (container.children.length > 1) {
            newRow.remove();
            validateExpenses();
        }
    });

    container.appendChild(newRow);
    validateExpenses();
}

// save function with validation
async function handleFormSubmit(e) {
    e.preventDefault();
    showLoader();

    if (!validateForm()) return;

    const formData = new FormData(e.target);
    const payload = {
        year: formData.get('year'),
        month: formData.get('month'),
        income: formData.get('income'),
        expenses: []
    };

    // Build expenses array
    const categories = formData.getAll('expense[category][]');
    const amounts = formData.getAll('expense[amount][]');
    categories.forEach((category, index) => {
        if (category && amounts[index]) {
            payload.expenses.push({
                category: category,
                amount_spent: amounts[index]
            });
        }
    });

    try {
        // Save income
        const incomeResponse = await fetch('/expenditures', { // Updated endpoint
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify({
                year: payload.year,
                month: payload.month,
                income: payload.income
            })
        });

        if (!incomeResponse.ok) throw new Error("Failed to save income");

        // Save expenses
        const expenseResponse = await fetch(e.target.action, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify(payload)
        });

        if (expenseResponse.ok) {
            showToast("Data saved successfully!", "success");
            setTimeout(() => window.location.reload(), 1500);
        } else {
            const errorData = await expenseResponse.json();
            showToast(errorData.error || "Error saving data", "error");
        }
    } catch (error) {
        showToast("Network error: " + error.message, "error");
    } finally {
        hideLoader();
    }
}

// Enhanced validation functions
function validateForm() {
  const year = document.querySelector("select[name='year']").value;
  const month = document.querySelector("select[name='month']").value;
  const income = parseFloat(document.querySelector("input[name='income']").value) || 0;
  
  // Check required fields
  if (!year || !month) {
    showToast("Please select both year and month", "error");
    return false;
  }
  
  if (income <= 0) {
    showToast("Income must be greater than 0", "error");
    return false;
  }

  // Validate expenses
  let totalExpenses = 0;
  document.querySelectorAll('input[name="expense[amount][]"]').forEach(input => {
    const amount = parseFloat(input.value) || 0;
    if (amount <= 0) {
      showToast("All expense amounts must be greater than 0", "error");
      return false;
    }
    totalExpenses += amount;
  });

  if (totalExpenses > income) {
    showToast(`Total expenses (‚Çπ${totalExpenses}) exceed income (‚Çπ${income})`, "error");
    return false;
  }
  return true;
}



// Helper functions
function showLoader() {
  document.getElementById('loader').style.display = 'block';
  document.querySelectorAll('button').forEach(btn => btn.disabled = true);
}

function hideLoader() {
  document.getElementById('loader').style.display = 'none';
  document.querySelectorAll('button').forEach(btn => btn.disabled = false);
}

function validateExpenses() {
  const income = parseFloat(document.querySelector('input[name="income"]').value) || 0;
  let totalExpenses = 0;
  
  document.querySelectorAll('input[name="expense[amount][]"]').forEach(input => {
    const amount = parseFloat(input.value) || 0;
    totalExpenses += amount;
    input.style.borderColor = amount > income ? '#ff6363' : '';
  });

  document.querySelector('input[name="income"]').style.borderColor = 
    totalExpenses > income ? '#ff6363' : '';
}

function showLoader() {
      document.getElementById('loading-overlay').style.display = 'block'; 
      document.querySelectorAll('button').forEach(btn => btn.disabled = true);
    }

    function hideLoader() {
      document.getElementById('loading-overlay').style.display = 'none'; 
      document.querySelectorAll('button').forEach(btn => btn.disabled = false);
    }


function showToast(message, type) {
  const toast = document.createElement('div');
  toast.className = `toast ${type} show`;
  toast.textContent = message;
  document.body.appendChild(toast);

  setTimeout(() => {
    toast.remove();
  }, 3000);
}
</script>
</body>
</html>